<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:ctrl="clr-namespace:TwitchLeecher.Gui.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Constants.xaml" />
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BVConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <!-- Tooltip -->
    <SolidColorBrush x:Key="ToolTip.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ToolTip.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="ToolTip.Border" Color="{DynamicResource ToolTip.Border.Color}" />

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="FontSize" Value="{DynamicResource Global.Font.Size}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Foreground" Value="{DynamicResource ToolTip.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource ToolTip.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToolTip.Border}" />
    </Style>
    <!-- /ToolTip -->

    <!-- ContentPresenter -->
    <Style TargetType="{x:Type ContentPresenter}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    </Style>
    <!-- /ContentPresenter -->

    <!-- ScrollBar -->
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="{DynamicResource Scrollbar.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="{DynamicResource Scrollbar.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="{DynamicResource Global.Theme.Color}" />

    <Style x:Key="TlRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}"
                               Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TlScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Static.Thumb}"
                               Height="{TemplateBinding Height}" SnapsToDevicePixels="True"
                               Width="{TemplateBinding Width}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle"
                                    Value="{DynamicResource ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle"
                                    Value="{DynamicResource ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TlScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Static.Thumb}"
                               Height="{TemplateBinding Height}" SnapsToDevicePixels="True"
                               Width="{TemplateBinding Width}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle"
                                    Value="{DynamicResource ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle"
                                    Value="{DynamicResource ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1,0" />
        <Setter Property="Width" Value="12" />
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Track Margin="0,5,5,5" x:Name="PART_Track" IsDirectionReversed="true"
                               IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                                              Style="{StaticResource TlRepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                                              Style="{StaticResource TlRepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource TlScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="12" />
                <Setter Property="MinHeight" Value="12" />
                <Setter Property="BorderThickness" Value="0,1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Track Margin="5,0,5,5" x:Name="PART_Track" Grid.Column="1"
                                       IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                                      Style="{StaticResource TlRepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                                      Style="{StaticResource TlRepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource TlScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /ScrollBar -->

    <!-- TextBlock -->
    <SolidColorBrush x:Key="TextBlock.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Light.Disabled.Color}" />

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextAlignment" Value="Justify" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextBlock.Disabled.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TextBlock -->

    <!-- Hyperlink -->
    <SolidColorBrush x:Key="Hyperlink.Foreground" Color="{DynamicResource Hyperlink.Foreground.Color}" />

    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource Hyperlink.Foreground}" />
    </Style>
    <!-- /Hyperlink -->

    <!-- Label -->
    <SolidColorBrush x:Key="Label.Disabled.Foreground" Color="{DynamicResource Text.Foreground.Light.Disabled.Color}" />

    <Style TargetType="{x:Type Label}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Label.Disabled.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /Label -->

    <!-- Button -->
    <SolidColorBrush x:Key="Button.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="Button.Static.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="Button.Static.Border" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.FocusVisual.Border" Color="{DynamicResource Button.FocusVisual.Border.Color}" />

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="True"
                               Stroke="{DynamicResource Button.FocusVisual.Border}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Button.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border"
                                    Value="{DynamicResource Button.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border"
                                    Value="{DynamicResource Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border"
                                    Value="{DynamicResource Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border"
                                    Value="{DynamicResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border"
                                    Value="{DynamicResource Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border"
                                    Value="{DynamicResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border"
                                    Value="{DynamicResource Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                    Value="{DynamicResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /Button -->

    <!-- RepeatButton -->
    <SolidColorBrush x:Key="RepeatButton.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Static.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Static.Border" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="RepeatButton.MouseOver.Background"
                     Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="RepeatButton.MouseOver.Border" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Pressed.Background" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Pressed.Border" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RepeatButton.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RepeatButton.FocusVisual.Border" Color="{DynamicResource Button.FocusVisual.Border.Color}" />

    <Style x:Key="RepeatButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="True"
                               Stroke="{DynamicResource Button.FocusVisual.Border}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource RepeatButton.Static.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource RepeatButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource RepeatButton.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RepeatButtonFocusVisual}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource RepeatButton.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{DynamicResource RepeatButton.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource RepeatButton.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{DynamicResource RepeatButton.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource RepeatButton.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border"
                                    Value="{DynamicResource RepeatButton.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource RepeatButton.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                    Value="{DynamicResource RepeatButton.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource RepeatButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    </Style>
    <!-- /RepeatButton -->

    <!-- ButtonChrome -->
    <SolidColorBrush x:Key="ButtonChrome.Static.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.Static.Border" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.MouseOver.Background"
                     Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.MouseOver.Border" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.Pressed.Background" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.Pressed.Border" Color="{DynamicResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ButtonChrome.FocusVisual.Border" Color="{DynamicResource Button.FocusVisual.Border.Color}" />

    <Style x:Key="ButtonChromeFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="True"
                               Stroke="{DynamicResource ButtonChrome.FocusVisual.Border}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:ButtonChrome}">
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonChromeFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ButtonChrome.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonChrome.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonChrome}">
                    <Grid>
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" />
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          IsEnabled="{TemplateBinding IsEnabled}" Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Disabled.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Pressed.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="False" />
                                <Condition Property="RenderMouseOver" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.MouseOver.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="True" />
                                <Condition Property="RenderMouseOver" Value="False" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Pressed.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True" />
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                                <Condition Property="RenderMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Static.Background}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder"
                                    Value="{DynamicResource ButtonChrome.Static.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /ButtonChrome -->

    <!-- ButtonSpinner -->
    <SolidColorBrush x:Key="ButtonSpinner.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Static.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Disabled.Border" Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.MouseOver.Border" Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="ButtonSpinner.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />

    <Style TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonSpinner.Static.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource ButtonSpinner.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonSpinner.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn" Width="*" />
                                <ColumnDefinition x:Name="secondContentColumn" Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Grid x:Name="gridContent" Grid.Column="1"
                                  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowButtonSpinner"
                                                     Converter="{StaticResource BVConverter}" />
                                </Grid.Visibility>
                                <RepeatButton x:Name="PART_IncreaseButton" Focusable="False"
                                              IsTabStop="{TemplateBinding IsTabStop}">
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Path Data="M0,5L4.5,0.5 9,5 6,5 4.5,3.5 3,5z" Focusable="False"
                                                  Fill="{DynamicResource ButtonSpinner.Static.Foreground}"
                                                  HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True"
                                                  VerticalAlignment="Center" Width="9" />
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                                <RepeatButton x:Name="PART_DecreaseButton" Focusable="False"
                                              IsTabStop="{TemplateBinding IsTabStop}" Grid.Row="1">
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Path Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Focusable="False"
                                                  Fill="{DynamicResource ButtonSpinner.Static.Foreground}"
                                                  HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True"
                                                  VerticalAlignment="Center" Width="9" />
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonSpinner.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonSpinner.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonSpinner.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{DynamicResource ButtonSpinner.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ButtonSpinner.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Path Data="M0,5L4.5,0.5 9,5 6,5 4.5,3.5 3,5z" Focusable="False"
                                              Fill="{DynamicResource ButtonSpinner.Disabled.Foreground}"
                                              HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" Width="9" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Path Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Focusable="False"
                                              Fill="{DynamicResource ButtonSpinner.Disabled.Foreground}"
                                              HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" Width="9" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ButtonSpinnerLocation" Value="Left">
                            <Setter Property="Width" TargetName="firstContentColumn" Value="Auto" />
                            <Setter Property="Width" TargetName="secondContentColumn" Value="*" />
                            <Setter Property="Grid.Column" TargetName="contentPresenter" Value="1" />
                            <Setter Property="Grid.Column" TargetName="gridContent" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /ButtonSpinner -->

    <!-- DateTimePicker -->
    <SolidColorBrush x:Key="TlDateTimePicker.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Disabled.Border"
                     Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Error.Background"
                     Color="{DynamicResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.MouseOver.Border"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="TlDateTimePicker.Watermark.Foreground"
                     Color="{DynamicResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type ctrl:TlDateTimePicker}">
        <Setter Property="Foreground" Value="{StaticResource TlDateTimePicker.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TlDateTimePicker.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TlDateTimePicker.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}"
                                    Foreground="{StaticResource TlDateTimePicker.Watermark.Foreground}"
                                    Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}"
                                    Foreground="{StaticResource TlDateTimePicker.Watermark.Foreground}"
                                    Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CalendarWidth" Value="178" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:TlDateTimePicker}">
                    <Border>
                        <Grid>
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}"
                                                        BorderThickness="0"
                                                        ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                        Background="{TemplateBinding Background}"
                                                        HorizontalContentAlignment="Stretch" IsTabStop="False"
                                                        ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                                                        VerticalContentAlignment="Stretch">
                                        <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False"
                                                               BorderThickness="0" Background="Transparent"
                                                               Foreground="{TemplateBinding Foreground}"
                                                               FontWeight="{TemplateBinding FontWeight}"
                                                               FontStyle="{TemplateBinding FontStyle}"
                                                               FontStretch="{TemplateBinding FontStretch}"
                                                               FontSize="{TemplateBinding FontSize}"
                                                               FontFamily="{TemplateBinding FontFamily}"
                                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                               IsTabStop="True" IsUndoEnabled="True" MinWidth="20"
                                                               Padding="{TemplateBinding Padding}"
                                                               TextAlignment="{TemplateBinding TextAlignment}"
                                                               TextWrapping="NoWrap"
                                                               Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                               TabIndex="{TemplateBinding TabIndex}"
                                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                               WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
                                                               Watermark="{TemplateBinding Watermark}"
                                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    </xctk:ButtonSpinner>
                                    <ToggleButton x:Name="_calendarToggleButton" Background="White" Grid.Column="1"
                                                  Focusable="False"
                                                  IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.IsHitTestVisible>
                                            <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <xctk:InverseBoolConverter />
                                                </Binding.Converter>
                                            </Binding>
                                        </ToggleButton.IsHitTestVisible>
                                        <ToggleButton.IsEnabled>
                                            <Binding Path="IsReadOnly"
                                                     RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <xctk:InverseBoolConverter />
                                                </Binding.Converter>
                                            </Binding>
                                        </ToggleButton.IsEnabled>
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Grid SnapsToDevicePixels="True">
                                                                <xctk:ButtonChrome x:Name="ToggleButtonChrome"
                                                                    CornerRadius="0"
                                                                    RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                                    RenderPressed="{TemplateBinding IsPressed}"
                                                                    RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}"
                                                                    RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                                    <Grid>
                                                                        <Grid.ColumnDefinitions>
                                                                            <ColumnDefinition Width="*" />
                                                                            <ColumnDefinition Width="Auto" />
                                                                        </Grid.ColumnDefinitions>
                                                                        <ContentPresenter
                                                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                            Content="{TemplateBinding Content}"
                                                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                            HorizontalAlignment="Stretch"
                                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                            VerticalAlignment="Stretch" />
                                                                        <Grid x:Name="arrowGlyph" Grid.Column="1"
                                                                              IsHitTestVisible="False" Margin="5">
                                                                            <Path x:Name="Arrow"
                                                                                Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z"
                                                                                Fill="{StaticResource TlDateTimePicker.Static.Foreground}"
                                                                                Height="5" Margin="0,1,0,0" Width="9" />
                                                                        </Grid>
                                                                    </Grid>
                                                                </xctk:ButtonChrome>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Fill" TargetName="Arrow"
                                                                            Value="#FFAFAFAF" />
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                        <ToggleButton.Visibility>
                                            <TemplateBinding Property="ShowDropDownButton"
                                                             Converter="{StaticResource BVConverter}" />
                                        </ToggleButton.Visibility>
                                    </ToggleButton>
                                </Grid>
                            </Border>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}"
                                   StaysOpen="False" ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0" />
                                            <GradientStop Color="#FFE5E5E5" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0"
                                                  DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}"
                                                  DisplayDate="2017-08-23">
                                            <Calendar.Template>
                                                <ControlTemplate TargetType="{x:Type Calendar}">
                                                    <Viewbox
                                                        Width="{Binding CalendarWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                            <CalendarItem x:Name="PART_CalendarItem"
                                                                          BorderBrush="{TemplateBinding BorderBrush}"
                                                                          BorderThickness="{TemplateBinding BorderThickness}"
                                                                          Background="{TemplateBinding Background}"
                                                                          Style="{TemplateBinding CalendarItemStyle}" />
                                                        </StackPanel>
                                                    </Viewbox>
                                                </ControlTemplate>
                                            </Calendar.Template>
                                        </Calendar>
                                        <ctrl:TlTimePicker x:Name="PART_TimeUpDown"
                                                           AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                                           Background="{StaticResource TlDateTimePicker.Static.Background}"
                                                           ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                                           Foreground="{StaticResource TlDateTimePicker.Static.Foreground}"
                                                           FormatString="{TemplateBinding TimeFormatString}"
                                                           Format="{TemplateBinding TimeFormat}"
                                                           IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                                           Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                                           Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                                           Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                                           ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                                           Step="{TemplateBinding Step}" Text=""
                                                           Visibility="{TemplateBinding TimePickerVisibility}"
                                                           Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                                           WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                                           Watermark="{TemplateBinding TimeWatermark}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlDateTimePicker.MouseOver.Border}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlDateTimePicker.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource TlDateTimePicker.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource TlDateTimePicker.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TlDateTimePicker.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox"
                                    Value="{Binding ElementName=PART_TextBox}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TlDateTimePicker.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="UpdateValueOnEnterKey" Value="True">
                            <Setter Property="Value" TargetName="PART_TimeUpDown"
                                    Value="{Binding Value, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource TlDateTimePicker.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /DateTimePicker -->

    <!-- TimePicker -->
    <SolidColorBrush x:Key="TlTimePicker.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Disabled.Border" Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Error.Background" Color="{DynamicResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.MouseOver.Border" Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="TlTimePicker.Watermark.Foreground" Color="{DynamicResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type ctrl:TlTimePicker}">
        <Setter Property="Foreground" Value="{StaticResource TlTimePicker.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TlTimePicker.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TlTimePicker.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{StaticResource TlTimePicker.Watermark.Foreground}"
                                    Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:TlTimePicker}">
                    <Border x:Name="root" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}"
                                                BorderThickness="0"
                                                ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                Background="{TemplateBinding Background}"
                                                HorizontalContentAlignment="Stretch" IsTabStop="False"
                                                ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                                                VerticalContentAlignment="Stretch">
                                <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0"
                                                       Background="Transparent"
                                                       Foreground="{TemplateBinding Foreground}"
                                                       FontWeight="{TemplateBinding FontWeight}"
                                                       FontStyle="{TemplateBinding FontStyle}"
                                                       FontStretch="{TemplateBinding FontStretch}"
                                                       FontSize="{TemplateBinding FontSize}"
                                                       FontFamily="{TemplateBinding FontFamily}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       IsTabStop="True" IsUndoEnabled="True" MinWidth="20"
                                                       Padding="{TemplateBinding Padding}"
                                                       TextAlignment="{TemplateBinding TextAlignment}"
                                                       TextWrapping="NoWrap"
                                                       Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                       TabIndex="{TemplateBinding TabIndex}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
                                                       Watermark="{TemplateBinding Watermark}" />
                            </xctk:ButtonSpinner>
                            <ToggleButton x:Name="_timePickerToggleButton" Background="White" Grid.Column="1"
                                          Focusable="False"
                                          IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.IsHitTestVisible>
                                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:InverseBoolConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </ToggleButton.IsHitTestVisible>
                                <ToggleButton.IsEnabled>
                                    <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:InverseBoolConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </ToggleButton.IsEnabled>
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Grid SnapsToDevicePixels="True">
                                                        <xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0"
                                                                           RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                                           RenderPressed="{TemplateBinding IsPressed}"
                                                                           RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}"
                                                                           RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="*" />
                                                                    <ColumnDefinition Width="Auto" />
                                                                </Grid.ColumnDefinitions>
                                                                <ContentPresenter
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                    Content="{TemplateBinding Content}"
                                                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                    HorizontalAlignment="Stretch"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                    VerticalAlignment="Stretch" />
                                                                <Grid x:Name="arrowGlyph" Grid.Column="1"
                                                                      IsHitTestVisible="False" Margin="5">
                                                                    <Path x:Name="Arrow"
                                                                          Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z"
                                                                          Fill="{StaticResource TlTimePicker.Static.Foreground}"
                                                                          Height="5" Margin="0,1,0,0" Width="9" />
                                                                </Grid>
                                                            </Grid>
                                                        </xctk:ButtonChrome>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Fill" TargetName="Arrow"
                                                                    Value="#FFAFAFAF" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                                <ToggleButton.Visibility>
                                    <TemplateBinding Property="ShowDropDownButton"
                                                     Converter="{StaticResource BVConverter}" />
                                </ToggleButton.Visibility>
                            </ToggleButton>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True"
                                   IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False"
                                   ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        MinWidth="{Binding ActualWidth, ElementName=root}">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0" />
                                            <GradientStop Color="#FFE5E5E5" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Grid>
                                        <ListBox x:Name="PART_TimeListItems" BorderThickness="0"
                                                 DisplayMemberPath="Display">
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="{x:Type ListBoxItem}">
                                                    <Setter Property="Padding" Value="4" />
                                                    <Style.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True" />
                                                                <Condition Property="IsSelected" Value="False" />
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" Value="#FFB8E0F3" />
                                                            <Setter Property="BorderBrush" Value="#FF26A0DA" />
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="False" />
                                                                <Condition Property="IsSelected" Value="True" />
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" Value="#FFC4E5F6" />
                                                            <Setter Property="BorderBrush" Value="#FF26A0DA" />
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True" />
                                                                <Condition Property="IsSelected" Value="True" />
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" Value="#FFD1E8FF" />
                                                            <Setter Property="BorderBrush" Value="#FF66A7E8" />
                                                        </MultiTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                        </ListBox>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlTimePicker.MouseOver.Border}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlTimePicker.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource TlTimePicker.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource TlTimePicker.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TlTimePicker.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox"
                                    Value="{Binding ElementName=PART_TextBox}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TlTimePicker.Focus.Border}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                           Value="True" />
                                <Condition Value="DateTimePicker">
                                    <Condition.Binding>
                                        <Binding Path="TemplatedParent" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xctk:ObjectTypeToNameConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsHitTestVisible" TargetName="_timePickerToggleButton" Value="True" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource TlTimePicker.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TimePicker -->

    <!-- TextBox -->
    <SolidColorBrush x:Key="TextBox.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Foreground" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Background" Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Border" Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Error.Background" Color="{DynamicResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="TextBox.Inactive.Selection.Background"
                     Color="{DynamicResource TextBox.Background.Inactive.Selected.Color}" />

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="27" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource TextBox.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{DynamicResource TextBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource TextBox.Inactive.Selection.Background}" />
            </MultiTrigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextBox.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TextBox -->

    <!-- WatermarkTextBox -->
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Border"
                     Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Error.Background"
                     Color="{DynamicResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.MouseOver.Border"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Watermark.Foreground"
                     Color="{DynamicResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type xctk:WatermarkTextBox}">
        <Setter Property="Foreground" Value="{StaticResource WatermarkTextBox.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource WatermarkTextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource WatermarkTextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}"
                                    Foreground="{StaticResource WatermarkTextBox.Watermark.Foreground}"
                                    Focusable="False" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="0">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  IsHitTestVisible="False" Margin="{TemplateBinding Padding}"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.ContentTemplate>
                                        <Binding Path="WatermarkTemplate"
                                                 RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.TargetNullValue>
                                                <DataTemplate>
                                                    <ContentControl Content="{Binding}"
                                                                    Foreground="{StaticResource WatermarkTextBox.Watermark.Foreground}"
                                                                    Focusable="False" />
                                                </DataTemplate>
                                            </Binding.TargetNullValue>
                                        </Binding>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="False" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="True" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource TextBox.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{DynamicResource TextBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource WatermarkTextBox.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /WatermarkTextBox -->

    <!-- TlIntegerUpDown -->
    <SolidColorBrush x:Key="TlIntegerUpDown.Static.Foreground" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Disabled.Foreground"
                     Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Disabled.Border" Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Error.Background"
                     Color="{DynamicResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.MouseOver.Border"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Focus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="TlIntegerUpDown.Watermark.Foreground"
                     Color="{DynamicResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type ctrl:TlIntegerUpDown}">
        <Setter Property="Foreground" Value="{StaticResource TlIntegerUpDown.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TlIntegerUpDown.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TlIntegerUpDown.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}"
                                    Foreground="{StaticResource TlIntegerUpDown.Watermark.Foreground}"
                                    Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:TlIntegerUpDown}">
                    <xctk:ButtonSpinner x:Name="PART_Spinner"
                                        AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
                                        Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch"
                                        IsTabStop="False"
                                        ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
                                        VerticalContentAlignment="Stretch">
                        <xctk:WatermarkTextBox x:Name="PART_TextBox"
                                               AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                               AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                               AcceptsReturn="False" BorderThickness="0" Background="Transparent"
                                               ContextMenu="{TemplateBinding ContextMenu}"
                                               Foreground="{TemplateBinding Foreground}"
                                               FontWeight="{TemplateBinding FontWeight}"
                                               FontStyle="{TemplateBinding FontStyle}"
                                               FontStretch="{TemplateBinding FontStretch}"
                                               FontSize="{TemplateBinding FontSize}"
                                               FontFamily="{TemplateBinding FontFamily}"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               IsTabStop="True" IsUndoEnabled="True" MinWidth="20"
                                               Padding="{TemplateBinding Padding}"
                                               TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                               TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                               WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                               Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </xctk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource TlIntegerUpDown.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource TlIntegerUpDown.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TlIntegerUpDown.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlIntegerUpDown.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TlIntegerUpDown.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox"
                                    Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource TlIntegerUpDown.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TlIntegerUpDown -->

    <!-- CheckBox -->
    <SolidColorBrush x:Key="OptionMark.Static.Foreground" Color="{DynamicResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background"
                     Color="{DynamicResource TextControl.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background"
                     Color="{DynamicResource TextControl.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{DynamicResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true"
                               Stroke="{StaticResource OptionMark.Static.Foreground}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxOptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true"
                               Stroke="{StaticResource OptionMark.Static.Foreground}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource OptionMark.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0"
                                      Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}"
                                           Margin="2" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxOptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /CheckBox -->

    <!-- RadioButton -->
    <SolidColorBrush x:Key="RadioButton.Static.Foreground" Color="{DynamicResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background"
                     Color="{DynamicResource TextControl.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Background"
                     Color="{DynamicResource TextControl.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="{DynamicResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true"
                               Stroke="{StaticResource RadioButton.Static.Foreground}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonOptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true"
                               Stroke="{StaticResource RadioButton.Static.Foreground}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource RadioButton.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="100"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}"
                                         MinWidth="6" MinHeight="6" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle"
                                    Value="{StaticResource RadioButtonOptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource RadioButton.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource RadioButton.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder"
                                    Value="{StaticResource RadioButton.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark"
                                    Value="{StaticResource RadioButton.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /RadioButton -->

    <!-- ProgressBar -->
    <SolidColorBrush x:Key="ProgressBar.Progress" Color="{DynamicResource ProgressBar.Progress.Color}" />
    <SolidColorBrush x:Key="ProgressBar.Background" Color="{DynamicResource ProgressBar.Background.Color}" />
    <SolidColorBrush x:Key="ProgressBar.Border" Color="{DynamicResource TextControl.Border.Color}" />

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                            Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                            Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /ProgressBar -->

    <!-- TabItem -->
    <SolidColorBrush x:Key="TabItem.Static.Foreground" Color="{DynamicResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="TabItem.Static.Background" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="{DynamicResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Foreground" Color="{DynamicResource Text.Foreground.Light.Disabled.Color}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="{DynamicResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="{DynamicResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="{DynamicResource Button.Background.MouseOver.Color}" />

    <Style x:Key="TabItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
                               Stroke="{StaticResource TabItem.Static.Foreground}" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="mainBorder" SnapsToDevicePixels="True" CornerRadius="3,3,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            Margin="0,0,1,0" VerticalAlignment="Bottom">
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Border}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="3,3,3,0" />
                            <Setter Property="Background" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Selected.Border}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /TabItem -->

    <!-- TabControl -->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true"
                                  Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1"
                                KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot"
                                    Value="{StaticResource TabItem.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /TabControl -->

    <!-- ComboBox -->
    <SolidColorBrush x:Key="ComboBox.Static.ForeGround" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background"
                     Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="{DynamicResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="{DynamicResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="{DynamicResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background"
                     Color="{DynamicResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border"
                     Color="{DynamicResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.ForeGround" Color="{DynamicResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border"
                     Color="{DynamicResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border"
                     Color="{DynamicResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="{DynamicResource Text.Foreground.Dark.Color}" />

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" Background="Transparent"
                                BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z"
                                  Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0"
                                  VerticalAlignment="Center" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow"
                                    Value="{StaticResource ComboBox.MouseOver.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition
                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                    Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Border x:Name="dropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"
                        Background="{TemplateBinding Background}" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top"
                                    Width="0">
                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                                           Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                           Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" SourceName="contentPresenter" Value="false">
                <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                        Value="{StaticResource ComboBox.Disabled.ForeGround}" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Border x:Name="dropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"
                        Background="{TemplateBinding Background}" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top"
                                    Width="0">
                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                                           Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                           Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}" />
            <Border x:Name="border" Background="{TemplateBinding Background}"
                    Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{StaticResource ComboBox.Disabled.Background}" />
                <Setter Property="Foreground" TargetName="PART_EditableTextBox"
                        Value="{StaticResource ComboBox.Disabled.ForeGround}" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="27" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource ComboBox.Static.ForeGround}" />
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource WatermarkTextBox.Error.Background}" />
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /ComboBox -->

    <!-- ComboBoxItem -->
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border"
                     Color="{DynamicResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border"
                     Color="{DynamicResource TextControl.Border.Focus.Color}" />

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                    Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /ComboBoxItem -->
</ResourceDictionary>